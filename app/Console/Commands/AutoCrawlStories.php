<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Story;
use App\Jobs\CrawlStoryJob;
use Illuminate\Support\Facades\Log;

class AutoCrawlStories extends Command
{
    protected $signature = 'auto:crawl-stories {--dry-run : Ch·ªâ hi·ªÉn th·ªã stories s·∫Ω ƒë∆∞·ª£c crawl, kh√¥ng th·ª±c hi·ªán}';
    protected $description = 'T·ª± ƒë·ªông crawl c√°c truy·ªán c√≥ auto_crawl = true v√† c·∫ßn crawl';

    public function handle()
    {
        $this->info('üîç ƒêang ki·ªÉm tra stories c·∫ßn auto crawl...');

        // L·∫•y c√°c stories c·∫ßn auto crawl
        $stories = Story::where('auto_crawl', true)
            ->where('is_active', true)
            ->where(function($query) {
                $query->where('crawl_status', config('constants.CRAWL_STATUS.VALUES.NOT_CRAWLED'))
                      ->orWhereNull('crawl_status');
            })
            ->whereNull('crawl_job_id') // Kh√¥ng c√≥ job ƒëang ch·∫°y
            ->orderBy('created_at', 'asc') // ∆Øu ti√™n truy·ªán c≈© tr∆∞·ªõc
            ->limit(10) // Gi·ªõi h·∫°n t·ªëi ƒëa 10 truy·ªán m·ªói l·∫ßn ch·∫°y
            ->get();

        if ($stories->isEmpty()) {
            $this->info('‚úÖ Kh√¥ng c√≥ truy·ªán n√†o c·∫ßn auto crawl.');
            return;
        }

        $this->info("üìö T√¨m th·∫•y {$stories->count()} truy·ªán c·∫ßn auto crawl:");

        // T√≠nh to√°n delay ƒë·ªÉ ph√¢n b·ªï ƒë·ªÅu trong 1 gi·ªù
        $delayBetweenJobs = $this->calculateOptimalDelay($stories->count());

        foreach ($stories as $index => $story) {
            $this->line("  - ID: {$story->id} | {$story->title}");

            if ($this->option('dry-run')) {
                $this->line("    ‚Üí S·∫Ω ƒë∆∞·ª£c dispatch v·ªõi delay: {$delayBetweenJobs} ph√∫t");
                continue;
            }

            try {
                // T√≠nh delay cho job n√†y (ph√¢n b·ªï ƒë·ªÅu trong 1 gi·ªù)
                $delayMinutes = $index * $delayBetweenJobs;

                // Dispatch crawl job v·ªõi delay v√† queue ri√™ng
                CrawlStoryJob::dispatch($story->id)
                    ->onQueue('crawl') // Queue ri√™ng cho crawl
                    ->delay(now()->addMinutes($delayMinutes));

                $this->info("  ‚úÖ ƒê√£ schedule job cho story ID: {$story->id} (delay: {$delayMinutes} ph√∫t)");
                Log::info("Auto crawl job scheduled for story ID: {$story->id}", [
                    'delay_minutes' => $delayMinutes,
                    'scheduled_at' => now()->addMinutes($delayMinutes)->toDateTimeString()
                ]);

            } catch (\Exception $e) {
                $this->error("  ‚ùå L·ªói khi schedule job cho story ID: {$story->id} - {$e->getMessage()}");
                Log::error("Auto crawl scheduling failed for story ID: {$story->id}", ['error' => $e->getMessage()]);
            }
        }

        if (!$this->option('dry-run')) {
            $this->info("üéâ ƒê√£ schedule {$stories->count()} truy·ªán v·ªõi delay ph√¢n b·ªï ƒë·ªÅu!");
            $this->info("‚è∞ Jobs s·∫Ω ch·∫°y trong v√≤ng {$delayBetweenJobs} x {$stories->count()} = " . ($delayBetweenJobs * $stories->count()) . " ph√∫t");
        } else {
            $this->info("üîç Dry run ho√†n th√†nh. S·ª≠ d·ª•ng l·ªánh kh√¥ng c√≥ --dry-run ƒë·ªÉ th·ª±c hi·ªán schedule.");
        }
    }

    /**
     * T√≠nh to√°n delay t·ªëi ∆∞u gi·ªØa c√°c jobs
     */
    private function calculateOptimalDelay($storyCount)
    {
        if ($storyCount <= 1) {
            return 0;
        }

        // Ph√¢n b·ªï ƒë·ªÅu trong 50 ph√∫t (ƒë·ªÉ c√≥ 10 ph√∫t buffer tr∆∞·ªõc l·∫ßn ch·∫°y ti·∫øp theo)
        $totalMinutes = 50;
        $delayBetweenJobs = floor($totalMinutes / $storyCount);

        // T·ªëi thi·ªÉu 2 ph√∫t, t·ªëi ƒëa 10 ph√∫t gi·ªØa c√°c jobs
        return max(2, min(10, $delayBetweenJobs));
    }
}
