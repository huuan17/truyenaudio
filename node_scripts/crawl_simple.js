const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

// L·∫•y tham s·ªë t·ª´ command line
const [, , baseUrl, startChapter, endChapter, outputFolder, singleMode] = process.argv;

if (!baseUrl || !startChapter || !endChapter || !outputFolder) {
  console.error('‚ùå Thi·∫øu tham s·ªë. S·ª≠ d·ª•ng: node crawl.js <baseUrl> <startChapter> <endChapter> <outputFolder> [singleMode]');
  process.exit(1);
}

const START_CHAPTER = parseInt(startChapter);
const END_CHAPTER = parseInt(endChapter);
const SINGLE_MODE = singleMode === '1';

// T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra
if (!fs.existsSync(outputFolder)) {
  try {
    fs.mkdirSync(outputFolder, { recursive: true });
    console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${outputFolder}`);
  } catch (e) {
    console.error('‚ùå L·ªói t·∫°o th∆∞ m·ª•c:', e.message);
    process.exit(1);
  }
}

async function crawlStory() {
  let browser;
  
  try {
    // Kh·ªüi ƒë·ªông browser
    browser = await puppeteer.launch({
      headless: 'new',
      executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu'
      ]
    });

    const page = await browser.newPage();

    // N·∫øu ·ªü ch·∫ø ƒë·ªô single mode, ch·ªâ log ra th√¥ng tin c·∫ßn thi·∫øt
    if (!SINGLE_MODE) {
      console.log(`üîç B·∫Øt ƒë·∫ßu crawl t·ª´ ch∆∞∆°ng ${START_CHAPTER} ƒë·∫øn ch∆∞∆°ng ${END_CHAPTER}`);
    }

    for (let chapter = START_CHAPTER; chapter <= END_CHAPTER; chapter++) {
      const url = `${baseUrl}${chapter}.html`;
      
      if (!SINGLE_MODE) {
        console.log(`üìñ ƒêang truy c·∫≠p: ${url}`);
      }

      try {
        await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 });

        // Tr√≠ch xu·∫•t n·ªôi dung t·ª´ div.chapter-c
        const content = await page.$eval('div.chapter-c', el => el.innerText);

        if (!content || content.trim().length === 0) {
          throw new Error('Kh√¥ng c√≥ n·ªôi dung');
        }

        const filename = path.join(outputFolder, `chuong-${chapter}.txt`);
        fs.writeFileSync(filename, content, 'utf-8');

        if (!SINGLE_MODE) {
          console.log(`‚úÖ ƒê√£ l∆∞u ch∆∞∆°ng ${chapter} ‚Üí ${filename}`);
        }
        
        // Delay nh·ªè ƒë·ªÉ tr√°nh spam server
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (e) {
        console.error(`‚ùå L·ªói ·ªü ch∆∞∆°ng ${chapter}:`, e.message);
        if (SINGLE_MODE) {
          await browser.close();
          process.exit(1);
        }
      }
    }

    await browser.close();
    
    if (!SINGLE_MODE) {
      console.log('üéâ ƒê√£ crawl xong t·∫•t c·∫£ ch∆∞∆°ng.');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói crawl:', error.message);
    if (browser) {
      await browser.close();
    }
    process.exit(1);
  }
}

crawlStory();
